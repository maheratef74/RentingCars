
@using Microsoft.AspNetCore.Mvc.Localization
@model RentingCars.Models.HelperClass.PaginatedList<DataAccessLayer.Entities.Car>
@inject IViewLocalizer localizer
@{
    Layout = "_AdminLayout";
}
<!DOCTYPE html>
<html lang="en" xmlns="http://www.w3.org/1999/html">
<head>
	<title>Carbook - Free Bootstrap 4 Template by Colorlib</title>
	<meta charset="utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    
	<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">

	<link href="https://fonts.googleapis.com/css?family=Poppins:200,300,400,500,600,700,800&display=swap" rel="stylesheet">

	<link rel="stylesheet" href="~/css/open-iconic-bootstrap.min.css">
	<link rel="stylesheet" href="~/css/animate.css">
    
	<link rel="stylesheet" href="~/css/owl.carousel.min.css">
	<link rel="stylesheet" href="~/css/owl.theme.default.min.css">
	<link rel="stylesheet" href="~/css/magnific-popup.css">

	<link rel="stylesheet" href="~/css/aos.css">

	<link rel="stylesheet" href="~/css/ionicons.min.css">

	<link rel="stylesheet" href="~/css/bootstrap-datepicker.css">
	<link rel="stylesheet" href="~/css/jquery.timepicker.css">

    
	<link rel="stylesheet" href="~/css/flaticon.css">
	<link rel="stylesheet" href="~/css/icomoon.css">
	<link rel="stylesheet" href="~/css/style.css">
</head>
<body>

<section class="ftco-section bg-light">
	<div class="container">
		<div class="row">
			@foreach (var car in Model.Items)
			{
				<div class="col-md-4">
					<div class="car-wrap rounded ftco-animate">
						<div class="img rounded d-flex align-items-end" style="background-image: url(/images/@car.PhotoUrl);">
						</div>
						<div class="text">
							<h2 class="mb-0"><a href="car-single.html"> @car.Model</a></h2>
							<div class="d-flex mb-3">
								<p class="price ml-auto">$@car.PricePerMonth <span>/month</span></p>
							</div>
							<p class="d-flex mb-0 d-block">
								<div class="d-flex mb-3">
									<p class="price ml-auto">@car.AvailableQuantity <span>/available quantity</span></p>
								</div>
								<form asp-controller="Dashboard" asp-action="DeleteCar" method="post" class="d-inline">
									<input type="hidden" name="carId" value="@car.Id" />
									<button type="submit" class="btn btn-danger py-2" onclick="return confirm('Are you sure you want to delete this car?');">
										@localizer["Delete"]
									</button>
								</form>
							</p>
						</div>
					</div>
				</div>
			}
		</div>
		<div class="row mt-5">
			<div class="col text-center">
				<div class="block-27">
					<ul>
						<!-- Previous Page -->
						@if (Model.HasPreviousPage)
						{
							<li><a asp-action="All" asp-route-pageNumber="@(Model.PageNumber - 1)">&lt;</a></li>
						}
						else
						{
							<li class="disabled"><span>&lt;</span></li>
						}

						<!-- Page Numbers -->
						@{
							var startPage = Math.Max(1, Model.PageNumber - 2);
							var endPage = Math.Min(Model.TotalPages, Model.PageNumber + 2);
                    
							// Show first page if not in initial range
							if (startPage > 1)
							{
								<li><a asp-action="All" asp-route-pageNumber="1">1</a></li>
								if (startPage > 2)
								{
									<li><span>...</span></li>
								}
							}

							for (var i = startPage; i <= endPage; i++)
							{
								<li class="@(i == Model.PageNumber ? "active" : "")">
									@if (i == Model.PageNumber)
									{
										<span>@i</span>
									}
									else
									{
										<a asp-action="All" asp-route-pageNumber="@i">@i</a>
									}
								</li>
							}

							// Show last page if not in final range
							if (endPage < Model.TotalPages)
							{
								if (endPage < Model.TotalPages - 1)
								{
									<li><span>...</span></li>
								}
								<li><a asp-action="All" asp-route-pageNumber="@Model.TotalPages">@Model.TotalPages</a></li>
							}
						}

						<!-- Next Page -->
						@if (Model.HasNextPage)
						{
							<li><a asp-action="All" asp-route-pageNumber="@(Model.PageNumber + 1)">&gt;</a></li>
						}
						else
						{
							<li class="disabled"><span>&gt;</span></li>
						}
					</ul>
				</div>
			</div>
		</div>
	</div>
</section>


          <!-- loader -->
<div id="ftco-loader" class="show fullscreen"><svg class="circular" width="48px" height="48px"><circle class="path-bg" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke="#eeeeee"/><circle class="path" cx="24" cy="24" r="22" fill="none" stroke-width="4" stroke-miterlimit="10" stroke="#F96D00"/></svg></div>
          
<script src="~/js/jquery.min.js"></script>
<script src="~/js/jquery-migrate-3.0.1.min.js"></script>
<script src="~/js/popper.min.js"></script>
<script src="~/js/bootstrap.min.js"></script>
<script src="~/js/jquery.easing.1.3.js"></script>
<script src="~/js/jquery.waypoints.min.js"></script>
<script src="~/js/jquery.stellar.min.js"></script>
<script src="~/js/owl.carousel.min.js"></script>
<script src="~/js/jquery.magnific-popup.min.js"></script>
<script src="~/js/aos.js"></script>
<script src="~/js/jquery.animateNumber.min.js"></script>
<script src="~/js/bootstrap-datepicker.js"></script>
<script src="~/js/jquery.timepicker.min.js"></script>
<script src="~/js/scrollax.min.js"></script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBVWaKrjvy3MaE7SQ74_uJiULgl1JY0H2s&sensor=false"></script>
<script src="~/js/google-map.js"></script>
<script src="~/js/main.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
  
<script>
	
	  function showSweetAlert(type, message) {
		  const Toast = Swal.mixin({
			  toast: true,
			  position: 'top-end',
			  showConfirmButton: false,
			  timer: 3000,
			  timerProgressBar: true,
			  didOpen: (toast) => {
				  toast.addEventListener('mouseenter', Swal.stopTimer)
				  toast.addEventListener('mouseleave', Swal.resumeTimer)
			  }
		  });

		  Toast.fire({
			  icon: type,
			  title: message
		  });
	  }
	  function confirmBooking() {
		  Swal.fire({
			  title: 'Are you sure?',
			  text: "Do you want to confirm your booking?",
			  icon: 'question',
			  showCancelButton: true,
			  confirmButtonText: 'Yes, confirm it!',
			  cancelButtonText: 'No, cancel',
		  }).then((result) => {
			  if (result.isConfirmed) {
				  // Call your booking function here
				  bookCar(); // Replace this with your actual function
				  Swal.fire(
					  'Confirmed!',
					  'Your booking has been confirmed.',
					  'success'
				  );
			  } else if (result.dismiss === Swal.DismissReason.cancel) {
				  Swal.fire(
					  'Cancelled',
					  'Your booking was not confirmed.',
					  'error'
				  );
			  }
		  });
	  }
	  function bookCar(carId) {
		  fetch('/Booking/Rent', {
			  method: 'POST',
			  headers: {
				  'Content-Type': 'application/json',
				  'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
			  },
			  body: JSON.stringify({ carId: carId })
		  })
			  .then(response => {
				  if (response.redirected) {
					  window.location.href = response.url;
				  } else {
					  return response.json();
				  }
			  })
			  .then(data => {
				  if (data && data.success) {
					  Swal.fire(
						  'Booked!',
						  data.message,
						  'success'
					  ).then(() => {
						  window.location.reload();
					  });
				  } else if (data) {
					  Swal.fire(
						  'Error!',
						  data.message,
						  'error'
					  );
				  }
			  })
			  .catch(error => {
				  Swal.fire(
					  'Error!',
					  'An error occurred while processing your booking',
					  'error'
				  );
			  });
	  }
	  document.addEventListener("DOMContentLoaded", function() {
		  @if (TempData["SuccessMessage"] != null)
		  {
			  <text>showSweetAlert('success', '@Html.Raw(TempData["SuccessMessage"])');</text>
		  }
		  @if (TempData["ErrorMessage"] != null)
		  {
			  <text>showSweetAlert('error', '@Html.Raw(TempData["ErrorMessage"])');</text>
		  }
		  @if (TempData["WarningMessage"] != null)
		  {
			  <text>showSweetAlert('warning', '@Html.Raw(TempData["WarningMessage"])');</text>
		  }
		  @if (TempData["InfoMessage"] != null)
		  {
			  <text>showSweetAlert('info', '@Html.Raw(TempData["InfoMessage"])');</text>
		  }
	  });
  </script>
</body>

</html>
